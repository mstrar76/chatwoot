-- Agent System Database Schema
-- Creates tables for the Chatwoot Agent MVP including pgvector support

-- Enable pgvector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Messages table - Raw chat transcripts for context
CREATE TABLE IF NOT EXISTS public.messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contact_phone TEXT NOT NULL,
    conversation_id BIGINT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
    content TEXT NOT NULL,
    message_type TEXT DEFAULT 'text' CHECK (message_type IN ('text', 'image', 'audio', 'file')),
    metadata JSONB DEFAULT '{}',
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Embeddings table - pgvector RAG memory store
CREATE TABLE IF NOT EXISTS public.embeddings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message_id BIGINT REFERENCES public.messages(id) ON DELETE CASCADE,
    contact_phone TEXT NOT NULL,
    embedding VECTOR(1536), -- OpenAI text-embedding-3-small dimension
    content_chunk TEXT NOT NULL,
    chunk_index INTEGER DEFAULT 0,
    metadata JSONB DEFAULT '{}', -- store message_type, channel, language, tags
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Agent configurations table - Global and per-inbox settings
CREATE TABLE IF NOT EXISTS public.agent_configs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_type TEXT NOT NULL CHECK (config_type IN ('global', 'inbox')),
    inbox_id INTEGER NULL, -- NULL for global config, specific inbox_id for inbox config
    enabled BOOLEAN DEFAULT true,
    config_data JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    UNIQUE(config_type, inbox_id) -- Ensure one config per type/inbox combination
);

-- Agent memory table - Per-contact conversation memory
CREATE TABLE IF NOT EXISTS public.agent_memory (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contact_phone TEXT NOT NULL,
    conversation_id BIGINT,
    memory_data JSONB NOT NULL DEFAULT '{}',
    last_interaction TIMESTAMP WITH TIME ZONE DEFAULT now(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    UNIQUE(contact_phone, conversation_id)
);

-- Agent logs table - Audit trail and observability
CREATE TABLE IF NOT EXISTS public.agent_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    conversation_id BIGINT NOT NULL,
    contact_phone TEXT NOT NULL,
    user_query TEXT NOT NULL,
    tool_used TEXT,
    final_response TEXT,
    latency_ms INTEGER,
    token_count INTEGER,
    cost_usd DECIMAL(10,6),
    status TEXT CHECK (status IN ('success', 'error', 'timeout', 'cancelled')),
    error_message TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Performance Indexes

-- Messages table indexes
CREATE INDEX IF NOT EXISTS idx_messages_contact_phone ON public.messages(contact_phone);
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON public.messages(conversation_id);
CREATE INDEX IF NOT EXISTS idx_messages_sent_at ON public.messages(sent_at);
CREATE INDEX IF NOT EXISTS idx_messages_role ON public.messages(role);

-- Embeddings table indexes (critical for RAG performance)
CREATE INDEX IF NOT EXISTS idx_embeddings_vector ON public.embeddings USING hnsw (embedding vector_ip_ops);
CREATE INDEX IF NOT EXISTS idx_embeddings_contact_phone ON public.embeddings(contact_phone);
CREATE INDEX IF NOT EXISTS idx_embeddings_created_at ON public.embeddings(created_at);
CREATE INDEX IF NOT EXISTS idx_embeddings_message_id ON public.embeddings(message_id);

-- Agent configs indexes
CREATE INDEX IF NOT EXISTS idx_agent_configs_type_inbox ON public.agent_configs(config_type, inbox_id);
CREATE INDEX IF NOT EXISTS idx_agent_configs_enabled ON public.agent_configs(enabled);

-- Agent memory indexes
CREATE INDEX IF NOT EXISTS idx_agent_memory_contact_phone ON public.agent_memory(contact_phone);
CREATE INDEX IF NOT EXISTS idx_agent_memory_conversation_id ON public.agent_memory(conversation_id);
CREATE INDEX IF NOT EXISTS idx_agent_memory_last_interaction ON public.agent_memory(last_interaction);

-- Agent logs indexes
CREATE INDEX IF NOT EXISTS idx_agent_logs_conversation_id ON public.agent_logs(conversation_id);
CREATE INDEX IF NOT EXISTS idx_agent_logs_contact_phone ON public.agent_logs(contact_phone);
CREATE INDEX IF NOT EXISTS idx_agent_logs_created_at ON public.agent_logs(created_at);
CREATE INDEX IF NOT EXISTS idx_agent_logs_status ON public.agent_logs(status);

-- Row Level Security (RLS) policies for multi-tenancy
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.embeddings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_memory ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.agent_logs ENABLE ROW LEVEL SECURITY;

-- Sample RLS policy - restrict access to contact's own data
-- Note: This would need to be adapted based on your authentication mechanism
-- CREATE POLICY messages_policy ON public.messages
--     USING (contact_phone = current_setting('app.current_contact_phone'));

-- Insert default global configuration
INSERT INTO public.agent_configs (config_type, config_data) 
VALUES ('global', '{
    "enabled": true,
    "llm_provider": "openai",
    "model": "gpt-4o",
    "max_tokens": 1024,
    "temperature": 0.3,
    "preview_delay_seconds": 15,
    "rag": {
        "enabled": true,
        "embedding_model": "text-embedding-3-small",
        "top_k": 4,
        "time_window_days": 90,
        "vector_table": "public.embeddings"
    },
    "sheets_tool": {
        "enabled": true,
        "sheet_configs": ["service_orders"],
        "cache_ttl_minutes": 5
    },
    "multimodal": {
        "audio_transcripts": true,
        "image_ocr": false
    },
    "cost_limits": {
        "daily_budget_usd": 50,
        "monthly_budget_usd": 1000
    },
    "log_level": "info"
}'::jsonb)
ON CONFLICT (config_type, inbox_id) DO NOTHING;

-- Comments for documentation
COMMENT ON TABLE public.messages IS 'Raw chat transcripts for agent context and history';
COMMENT ON TABLE public.embeddings IS 'Vector embeddings for RAG (Retrieval Augmented Generation)';
COMMENT ON TABLE public.agent_configs IS 'Global and per-inbox agent configuration settings';
COMMENT ON TABLE public.agent_memory IS 'Per-contact conversation memory and context';
COMMENT ON TABLE public.agent_logs IS 'Agent execution logs for observability and debugging';

COMMENT ON COLUMN public.embeddings.embedding IS 'Vector embedding (1536 dimensions for OpenAI text-embedding-3-small)';
COMMENT ON COLUMN public.embeddings.content_chunk IS 'Text content that was embedded (chunked for large messages)';
COMMENT ON COLUMN public.agent_configs.config_type IS 'Configuration scope: global or inbox-specific';
COMMENT ON COLUMN public.agent_configs.inbox_id IS 'Chatwoot inbox ID (NULL for global config)';